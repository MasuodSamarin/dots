* Using Helm instead of Ivy
#+BEGIN_SRC emacs-lisp
;; remove ivy, counsel, swiper, counsel-projectile
(use-package helm
  :ensure t
  :init
  (require 'helm)
  (require 'helm-config)
  (setq helm-mode-line-string "")
  (setq helm-split-window-inside-p t)
  (setq helm-autoresize-max-height 0)
  (setq helm-autoresize-min-height 25)
  (helm-autoresize-mode)
  (helm-mode)
  :bind
  (("M-x" . helm-M-x)
   ("C-x C-f" . helm-find-files)
   ("C-x C-r" . helm-resume)
   ("C-x b" . helm-buffers-list)
   ("C-c m" . helm-imenu)
   ("M-y" . helm-show-kill-ring)
   :map helm-map
   ("<tab>" . helm-execute-persistent-action)
   ("C-i" . helm-execute-persistent-action)
   ("C-z" . helm-select-action)))
;; helm-swoop
(use-package helm-swoop
  :ensure t
  :bind ("M-s w" . helm-swoop))

;; helm-projectile
(use-package helm-projectile
  :ensure t
  :after (persp-projectile)
  :config
  (define-key projectile-mode-map [remap projectile-find-other-file] #'helm-projectile-find-other-file)
  (define-key projectile-mode-map [remap projectile-find-file] #'helm-projectile-find-file)
  (define-key projectile-mode-map [remap projectile-find-file-in-known-projects] #'helm-projectile-find-file-in-known-projects)
  (define-key projectile-mode-map [remap projectile-find-file-dwim] #'helm-projectile-find-file-dwim)
  (define-key projectile-mode-map [remap projectile-find-dir] #'helm-projectile-find-dir)
  (define-key projectile-mode-map [remap projectile-recentf] #'helm-projectile-recentf)
  (define-key projectile-mode-map [remap projectile-switch-to-buffer] #'helm-projectile-switch-to-buffer)
  (define-key projectile-mode-map [remap projectile-grep] #'helm-projectile-grep)
  (define-key projectile-mode-map [remap projectile-ack] #'helm-projectile-ack)
  (define-key projectile-mode-map [remap projectile-ag] #'helm-projectile-ag)
  (define-key projectile-mode-map [remap projectile-ripgrep] #'helm-projectile-rg)
  (define-key projectile-mode-map [remap projectile-browse-dirty-projects] #'helm-projectile-browse-dirty-projects)
  (helm-projectile-commander-bindings))
#+END_SRC
* Configuration for Emacs verison 24
#+BEGIN_SRC emacs-lisp
(add-to-list 'package-archives '("emacs24" . "https://txgvnn.github.io/emacs24/"))

;; projectile
(use-package projectile
  :pin emacs24
  :ensure t
  :init
  (setq projectile-completion-system 'helm)
  (setq projectile-project-compilation-cmd "make ")
  (projectile-mode)
  (define-key projectile-mode-map (kbd "C-x p") 'projectile-command-map))

;; magit
(use-package ghub
  :pin emacs24
  :ensure t)
(use-package git-commit
  :pin emacs24
  :ensure t)
(use-package magit
  :pin emacs24
  :after (ghub git-commit)
  :ensure t
  :init (global-magit-file-mode)
  :config (define-key magit-file-mode-map (kbd "C-x g") nil)
  :bind ("C-x g g" . magit-status))

#+END_SRC

* Others
** 
#+BEGIN_SRC
(defun show-lossage ()
  "Show logssage."
  (interactive)
  (if (locate-library "interaction-log")
      (progn
        (load-library "interaction-log")
        (call-interactively 'interaction-log-mode))
    (view-lossage)))

(global-set-key (kbd "C-h l") 'show-lossage)

#+END_SRC
